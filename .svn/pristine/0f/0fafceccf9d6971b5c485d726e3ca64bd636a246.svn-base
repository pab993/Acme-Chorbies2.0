package services;

import java.util.Date;

import javax.transaction.Transactional;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import domain.Chirp;
import domain.Chorbi;

import utilities.AbstractTest;

@Transactional
@ContextConfiguration(locations = {
	"classpath:spring/junit.xml"
})
@RunWith(SpringJUnit4ClassRunner.class)
public class ChirpServiceTest extends AbstractTest{

	// The SUT
		// ====================================================
		
		@Autowired
		private ChirpService chirpService;
		
		@Autowired
		private ChorbiService chorbiService;
		
		// Tests
		// ====================================================
		
		/*
		 * Chirp to another chorbi.
		 * 
		 * En este caso de uso se crean y se guardan los chirps que queramos intercambiar con otros chorbies siempre y cuando
		 * nos encontramos autentificados como chorbi.
		 * Para provocar el error, se intenta guardar mediante con un usuario no autentificado o autenticado como admin e incluyendo un recipientId no válido.
		 */
		
		public void createTest(String username, Class<?> expected) {
			Class<?> caught;
			
			caught = null;
			try{
				
				authenticate(username);
				chirpService.create();
				unauthenticate();
				
			}catch (Throwable oops) {
				caught = oops.getClass();
			}
			checkExceptions(expected, caught);
			
		}
		
		public void saveTest(String username, int idRecipient, Class<?> expected) {
			Class<?> caught;
			
			caught = null;
			try{
				
				authenticate(username);

				Chirp chirp = chirpService.create();
				chirp.setText("test");
				chirp.setSubject("subject");
				
				chirp.setChorbiRecipient(chorbiService.findOne(idRecipient));
				chirpService.save(chirp);
				
				unauthenticate();
				
			}catch (Throwable oops) {
				caught = oops.getClass();
			}
			
			checkExceptions(expected, caught);
		}
		
		/*
		 * Erase any of the chirps that he or she's got or sent, which requires previous confirmation.
		 * 
		 * En este caso de uso se borran el chirp que desee el chorbi que se encuentra 
		 * actualmente autentificado siempre y cuando pertenecezca a dicho actor.
		 * Para provocar el error, se intenta acceder mediante un usuario no autentificado o admin.
		 */
		public void chirpDelete(final String username, final Chirp chirp, final Class<?> expected){
			
			Class<?> caught = null;
			
			try {
				
				authenticate(username);
				chirpService.delete(chirp);
				unauthenticate();
				
			} catch (final Throwable oops) {
				
				caught = oops.getClass();
		
			}	
			checkExceptions(expected, caught);
		}
		

		/*
		 * Browse the list of chirps that he or she's got, and reply any of them.
		 * Browse the list of chirps that he or she's got, and re-send any of them.
		 * 
		 * En este caso de uso se listan los chirps que pertenecen al chorbi que  se encuentra 
		 * actualmente autentificado.
		 * Para provocar el error, se intenta acceder mediante con un usuario no autentificado.
		 */
		public void myListOfChirpsTest(final String username, final Class<?> expected) {
			Class<?> caught = null;

			try {

				Chorbi chorbi;
				chorbi = chorbiService.findByPrincipal();

				this.authenticate(username);

				this.chirpService.checkIfChorbi();

				for (final Chorbi c : this.chorbiService.findAll())
					if (c.getUserAccount().getUsername().equals(username))
						chorbi = c;
				
				this.chirpService.findAllByChorbi(chorbi.getId());

				this.unauthenticate();

			} catch (final Throwable oops) {

				caught = oops.getClass();

			}

			this.checkExceptions(expected, caught);
		}
		
		public void sendChirpsTest(final String usernameSender, final Chorbi chorbiRecipient, final String subject, final String text, Date createMoment, final Class<?> expected) {
			Class<?> caught = null;

			try {

				this.authenticate(usernameSender);
				
				Chorbi chorbiSender = chorbiService.findOne(36);
				Chirp chirp = chirpService.create();
				chirp.setText(text);
				chirp.setSubject(subject);
				chirp.setCreateMoment(createMoment);
				
				chirp.setChorbiRecipient(chorbiRecipient);
				chirp.setChorbiSender(chorbiSender);
				chirpService.save(chirp);

				this.unauthenticate();

			} catch (final Throwable oops) {

				caught = oops.getClass();

			}

			this.checkExceptions(expected, caught);
		}
		
		
		// Drivers
		// ====================================================
		
		@Test
		public void driverCreateChirp(){
			
			Object testingData1[][] = {
				// Creación de un chirp si estoy autentificado como chorbi -> true
				{
				"chorbi1", null
				},
				// Creación de un chirp si estoy autentificado como admin -> false
				{
				"admin", IllegalArgumentException.class
				},
				// Creación de un chirp si no estoy autentificado -> false
				{
				null, IllegalArgumentException.class
				}
			};
			
			for(int i = 0; i<testingData1.length; i++){createTest((String) testingData1[i][0],
						(Class<?>) testingData1[i][1]);
			}
		}
		
		@Test
		public void driverSaveChirp(){
				
			Object testingData[][] = {
				// Si existe el idRecipient -> true
				{
				"chorbi1", 180, null
				},
				// Si no existe el idRecipient -> false
				{
				"chorbi1", 989 , IllegalArgumentException.class},
				{
				// Si estamos autentificados como admin para guardar un chirp -> false
				"admin", 37, IllegalArgumentException.class},
				{
				// Si no estamos autentificados para guardar un chirp y el idRecipient no existe -> false
				null, 989 , IllegalArgumentException.class}
				};
			
			for(int i = 0; i<testingData.length; i++){saveTest((String) testingData[i][0],
				(int) testingData[i][1],(Class<?>) testingData[i][2]);
			}
		}

		
		@Test
		public void driverDeleteChirp() {
			final Object testingData[][] = {
				// Chirp de su chorbi -> true
				{
					"chorbi2" ,chirpService.findOne(195), null
				},
				// Un chirp sin auth -> false
				{
					null, chirpService.findOne(243), IllegalArgumentException.class
				},
				// Se indica un chorbi que no existe -> false
				{
					"chorbi" ,chirpService.findOne(195), IllegalArgumentException.class
				},
				// Se intenta borrar un chirp que no pertenece al chorbi indicado -> false
				{
					"chorbi1", chirpService.findOne(195), IllegalArgumentException.class
				}
			};
			for (int i = 0; i < testingData.length; i++)
				this.chirpDelete((String) testingData[i][0], (Chirp) testingData[i][1], (Class<?>) testingData[i][2]);
		}
		
		@Test
		public void driverMyListOfChirpsTest() {
			final Object testingData[][] = {
				// Mi lista si estoy autentificado como chorbi -> true
				{
					"chorbi3", null
				},
				// Mi lista si estoy autentificado como admin -> false
				{
					"admin", IllegalArgumentException.class
				},
				// Mi lista si no estoy autentificado -> false
				{
					null, IllegalArgumentException.class
				}
			};
			for (int i = 0; i < testingData.length; i++)
				this.myListOfChirpsTest((String) testingData[i][0], (Class<?>) testingData[i][1]);

		}
		
		@Test
		public void driverSendChirpsTest() {
			Date date = new Date(System.currentTimeMillis()-1000);
			final Object testingData[][] = {
				
				// Campos introducidos incorrectos
				{
					"chorbi1", chorbiService.findOne(180), "Hi m8", "Wasup brah, how u'doing?", date, IllegalArgumentException.class
				}
			};
			for (int i = 0; i < testingData.length; i++)
				this.sendChirpsTest((String) testingData[i][0], (Chorbi) testingData[i][1], (String) testingData[i][2], (String) testingData[i][3],(Date) testingData[i][4], (Class<?>) testingData[i][5]);

		}
}
