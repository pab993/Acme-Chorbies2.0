package services;

import java.util.Collection;
import java.util.Date;

import javax.transaction.Transactional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.util.Assert;
import org.springframework.validation.BindingResult;
import org.springframework.validation.Validator;

import repositories.ChirpRepository;

import domain.Chorbi;
import domain.Chirp;
import forms.ChirpForm;

@Transactional
@Service
public class ChirpService {

	// Managed Repository
	// ====================================================================================

	@Autowired
	private ChirpRepository chirpRepository;

	// Managed Services
	// ====================================================================================

	@Autowired
	private ChorbiService chorbiService;

	// Constructor methods
	// ====================================================================================

	public ChirpService() {
		super();
	}

	// Simple CRUDS methods
	// ====================================================================================

	public Chirp findOne(int chirpId) {
		Assert.isTrue(chirpId != 0);
		Chirp result;

		result = chirpRepository.findOne(chirpId);

		return result;
	}

	public Collection<Chirp> findAll() {
		Collection<Chirp> result;

		result = chirpRepository.findAll();

		return result;
	}

	public Chirp create() {
		Chirp result;
		Chorbi principal;
		Date createMoment;

		principal = chorbiService.findByPrincipal();
		Assert.notNull(principal);

		createMoment = new Date(System.currentTimeMillis());
		result = new Chirp();
		result.setCreateMoment(createMoment);
		result.setChorbiSender(principal);

		return result;
	}

	public Chirp save(Chirp chirp) {
		Assert.notNull(chirp);
		Chirp result;
		Chorbi principal;

		principal = chorbiService.findByPrincipal();
		Assert.notNull(principal);
		Assert.notNull(chirp.getChorbiRecipient());
		Assert.notNull(chirp.getChorbiSender());
		Assert.notNull(chirp.getSubject());
		Assert.notNull(chirp.getText());
		result = chirpRepository.save(chirp);

		return result;
	}

	public void delete(Chirp chirp) {
		Assert.notNull(chirp);
		Chorbi chorbi;

		chorbi = chorbiService.findByPrincipal();
		Assert.notNull(chorbi);
		Assert.isTrue(chorbi.getId() == chirp.getChorbiSender().getId(),
				"You cant delete this chirp");

		chirpRepository.delete(chirp);
	}

	// Others bussines methods
	// ====================================================================================

	public Collection<Chirp> findAllByChorbi(int chorbiId) {
		Collection<Chirp> result;

		result = chirpRepository.findAllByChorbi(chorbiId);

		return result;
	}

	public void checkIfChorbi() {
		Chorbi principal;

		principal = chorbiService.findByPrincipal();
		Assert.notNull(principal);
		Assert.isInstanceOf(Chorbi.class, principal);
	}

	// Dashboard
	// ====================================================================================

	// public Integer minMessagesSended() {
	//
	// return messageRepository.minMessagesSended();
	// }
	//
	// public Integer maxMessagesSended() {
	//
	// return messageRepository.maxMessagesSended();
	// }
	//
	// public Integer avgMessagesSended() {
	//
	// return messageRepository.avgMessagesSended();
	// }

	// Ancillary methods
	// ====================================================================

	@Autowired
	private Validator validator;

	public Chirp reconstruct(ChirpForm chirpForm, BindingResult binding) {

		Chirp chirpRec = new Chirp();

		chirpRec.setChorbiSender(chorbiService.findByPrincipal());
		chirpRec.setCreateMoment(new Date(System.currentTimeMillis() - 10));

		chirpRec.setChorbiRecipient(chirpForm.getChorbiRecipient());
		chirpRec.setSubject(chirpForm.getSubject());
		chirpRec.setText(chirpForm.getText());
		chirpRec.setAttachments(chirpForm.getAttachments());

		validator.validate(chirpRec, binding);

		return chirpRec;
	}

	public int minChirpsReceived() {

		return chirpRepository.minChirpsReceived();
	}

	public int maxChirpsReceived() {
		return chirpRepository.maxChirpsReceived();
	}

	public int minChirpsSends() {
		return chirpRepository.minChirpsSends();
	}
	public int maxChirpsSends() {
		return chirpRepository.maxChirpsSends();
	}

	public Double avgChirps() {
		
		return chirpRepository.avgChirps();
	}
}
